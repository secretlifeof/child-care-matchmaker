services:
  matchmaker-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: matchmaker-api
    working_dir: /app
    ports:
      - "8002:8001"
    environment:
      - DEBUG=false
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - API_BASE_URL=http://host.docker.internal:8000
      - INITIAL_BATCH_SIZE=100
      - MAX_CENTERS_PER_REQUEST=1000
      - MIN_QUALITY_THRESHOLD=0.7
      - TARGET_MATCHES=10
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - matchmaker-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - production

  redis:
    image: redis:7-alpine
    container_name: matchmaker-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - matchmaker-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - dev
      - production

  # Development version
  matchmaker-api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: matchmaker-api-dev
    working_dir: /app
    ports:
      - "8002:8001"
    environment:
      - DEBUG=true
      - ENVIRONMENT=development
      - API_BASE_URL=http://host.docker.internal:8000
      - LOG_LEVEL=DEBUG
      - VERBOSE_LOGGING=true
    volumes:
      - .:/app
      - ./logs:/app/logs
    networks:
      - matchmaker-network
    profiles:
      - dev

  # Test runner service
  matchmaker-test:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: matchmaker-test
    working_dir: /app
    environment:
      - DEBUG=true
      - ENVIRONMENT=test
      - LOG_LEVEL=DEBUG
      - VERBOSE_LOGGING=true
    volumes:
      - .:/app
    command: >
      sh -c "
        pip install --no-cache-dir pytest pytest-asyncio pytest-cov &&
        python -m pytest tests/ -v --cov=src/matchmaker --cov-report=term-missing
      "
    profiles:
      - test

  # Monitoring and observability (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: matchmaker-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - matchmaker-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: matchmaker-grafana
    ports:
      - "3020:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - matchmaker-network
    profiles:
      - monitoring

  # Load balancer for multiple API instances
  nginx:
    image: nginx:alpine
    container_name: matchmaker-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - matchmaker-api
    networks:
      - matchmaker-network
    profiles:
      - production

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  matchmaker-network:
    driver: bridge

# Usage:
# Development: docker-compose --profile dev up
# Testing: docker-compose --profile test up --abort-on-container-exit
# Production: docker-compose --profile production up
# With monitoring: docker-compose --profile production --profile monitoring up